{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"A Replication of Karlan and List (2007)\"\n",
        "author: \"Sarah Howard\"\n",
        "format: html\n",
        "jupyter: python3\n",
        "date: 23 April 2025\n",
        "callout-appearance: minimal # this hides the blue \"i\" icon on .callout-notes\n",
        "---\n",
        "\n",
        "\n",
        "## Introduction\n",
        "\n",
        "Dean Karlan at Yale and John List at the University of Chicago conducted a field experiment to test the effectiveness of different fundraising letters. They sent out 50,000 fundraising letters to potential donors, randomly assigning each letter to one of three treatments: a standard letter, a matching grant letter, or a challenge grant letter. They published the results of this experiment in the _American Economic Review_ in 2007. The article and supporting data are available from the [AEA website](https://www.aeaweb.org/articles?id=10.1257/aer.97.5.1774) and from Innovations for Poverty Action as part of [Harvard's Dataverse](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/27853&version=4.2).\n",
        "\n",
        "_to do: expand on the description of the experiment._\n",
        "\n",
        "This project seeks to replicate their results.\n",
        "\n",
        "\n",
        "## Data\n",
        "\n",
        "### Description\n",
        "\n",
        "# üìä Dataset Summary: *Karlan & List (2007)* ‚Äì Charitable Giving Field Experiment\n",
        "\n",
        "## Overview\n",
        "This dataset contains data from a large-scale natural field experiment investigating how different types of matching grants influence charitable giving.\n",
        "\n",
        "- **Total Observations**: 50,083 individuals  \n",
        "- **Variables**: 51  \n",
        "- **Source**: *Does Price Matter in Charitable Giving?* (Karlan & List, 2007)\n",
        "\n",
        "---\n",
        "\n",
        "## üéØ Experimental Design Variables\n",
        "\n",
        "| Variable     | Description |\n",
        "|--------------|-------------|\n",
        "| `treatment`  | 1 if participant received a matching grant offer, 0 if control group |\n",
        "| `ratio`      | Categorical: Match ratio (e.g., 1:1, 2:1, 3:1) |\n",
        "| `ratio2`, `ratio3` | Dummies for 2:1 and 3:1 match conditions |\n",
        "| `size`       | Categorical: Maximum match size ($25k, $50k, $100k, or unstated) |\n",
        "| `size25`, `size50`, `size100`, `sizeno` | Dummy variables for match size |\n",
        "| `ask1`, `ask2`, `ask3` | Suggested donation amounts (based on prior giving) |\n",
        "\n",
        "---\n",
        "\n",
        "## üí∏ Donation Behavior Variables\n",
        "\n",
        "| Variable      | Description |\n",
        "|---------------|-------------|\n",
        "| `gave`        | Binary: 1 if donated, 0 otherwise |\n",
        "| `amount`      | Amount donated (USD) |\n",
        "| `amountchange` | Change in amount donated vs. previous gift |\n",
        "\n",
        "---\n",
        "\n",
        "## üßë‚Äçü§ù‚Äçüßë Demographic & ZIP Code-level Data\n",
        "\n",
        "| Variable            | Description |\n",
        "|---------------------|-------------|\n",
        "| `pwhite`, `pblack`  | Proportion of white and Black residents |\n",
        "| `page18_39`         | Proportion aged 18‚Äì39 |\n",
        "| `ave_hh_sz`         | Average household size |\n",
        "| `median_hhincome`   | Median household income |\n",
        "| `powner`            | Proportion of homeowners |\n",
        "| `psch_atlstba`      | Proportion with at least a bachelor's degree |\n",
        "| `pop_propurban`     | Proportion of population in urban areas |\n",
        "\n",
        "---\n",
        "\n",
        "## üó≥Ô∏è Political Context Variables\n",
        "\n",
        "| Variable      | Description |\n",
        "|---------------|-------------|\n",
        "| `red0`, `blue0` | Binary: Red or blue state indicator |\n",
        "| `redcty`, `bluecty` | Binary: Red or blue county indicator |\n",
        "\n",
        "---\n",
        "\n",
        "## ‚ùó Missing Data\n",
        "Some variables (especially demographic ones) have missing values for ~2,000 cases due to ZIP-level data availability.\n",
        "\n",
        "----\n",
        "\n",
        ":::: {.callout-note collapse=\"true\"}\n",
        "### Variable Definitions\n",
        "\n",
        "| Variable             | Description                                                         |\n",
        "|----------------------|---------------------------------------------------------------------|\n",
        "| `treatment`          | Treatment                                                           |\n",
        "| `control`            | Control                                                             |\n",
        "| `ratio`              | Match ratio                                                         |\n",
        "| `ratio2`             | 2:1 match ratio                                                     |\n",
        "| `ratio3`             | 3:1 match ratio                                                     |\n",
        "| `size`               | Match threshold                                                     |\n",
        "| `size25`             | \\$25,000 match threshold                                            |\n",
        "| `size50`             | \\$50,000 match threshold                                            |\n",
        "| `size100`            | \\$100,000 match threshold                                           |\n",
        "| `sizeno`             | Unstated match threshold                                            |\n",
        "| `ask`                | Suggested donation amount                                           |\n",
        "| `askd1`              | Suggested donation was highest previous contribution                |\n",
        "| `askd2`              | Suggested donation was 1.25 x highest previous contribution         |\n",
        "| `askd3`              | Suggested donation was 1.50 x highest previous contribution         |\n",
        "| `ask1`               | Highest previous contribution (for suggestion)                      |\n",
        "| `ask2`               | 1.25 x highest previous contribution (for suggestion)               |\n",
        "| `ask3`               | 1.50 x highest previous contribution (for suggestion)               |\n",
        "| `amount`             | Dollars given                                                       |\n",
        "| `gave`               | Gave anything                                                       |\n",
        "| `amountchange`       | Change in amount given                                              |\n",
        "| `hpa`                | Highest previous contribution                                       |\n",
        "| `ltmedmra`           | Small prior donor: last gift was less than median \\$35              |\n",
        "| `freq`               | Number of prior donations                                           |\n",
        "| `years`              | Number of years since initial donation                              |\n",
        "| `year5`              | At least 5 years since initial donation                             |\n",
        "| `mrm2`               | Number of months since last donation                                |\n",
        "| `dormant`            | Already donated in 2005                                             |\n",
        "| `female`             | Female                                                              |\n",
        "| `couple`             | Couple                                                              |\n",
        "| `state50one`         | State tag: 1 for one observation of each of 50 states; 0 otherwise  |\n",
        "| `nonlit`             | Nonlitigation                                                       |\n",
        "| `cases`              | Court cases from state in 2004-5 in which organization was involved |\n",
        "| `statecnt`           | Percent of sample from state                                        |\n",
        "| `stateresponse`      | Proportion of sample from the state who gave                        |\n",
        "| `stateresponset`     | Proportion of treated sample from the state who gave                |\n",
        "| `stateresponsec`     | Proportion of control sample from the state who gave                |\n",
        "| `stateresponsetminc` | stateresponset - stateresponsec                                     |\n",
        "| `perbush`            | State vote share for Bush                                           |\n",
        "| `close25`            | State vote share for Bush between 47.5% and 52.5%                   |\n",
        "| `red0`               | Red state                                                           |\n",
        "| `blue0`              | Blue state                                                          |\n",
        "| `redcty`             | Red county                                                          |\n",
        "| `bluecty`            | Blue county                                                         |\n",
        "| `pwhite`             | Proportion white within zip code                                    |\n",
        "| `pblack`             | Proportion black within zip code                                    |\n",
        "| `page18_39`          | Proportion age 18-39 within zip code                                |\n",
        "| `ave_hh_sz`          | Average household size within zip code                              |\n",
        "| `median_hhincome`    | Median household income within zip code                             |\n",
        "| `powner`             | Proportion house owner within zip code                              |\n",
        "| `psch_atlstba`       | Proportion who finished college within zip code                     |\n",
        "| `pop_propurban`      | Proportion of population urban within zip code                      |\n",
        "\n",
        "\n",
        "### Balance Test \n",
        "\n",
        "## ‚úÖ Randomization Check: Treatment vs. Control Group Balance\n",
        "\n",
        "To test the integrity of the random assignment, we compared several background variables between treatment and control groups using t-tests.\n",
        "\n",
        "### üîç Variables Tested:\n",
        "- `mrm2`: Months since last donation  \n",
        "- `years`: Years since first donation  \n",
        "- `hpa`: Highest prior donation  \n",
        "- `female`: Female indicator  \n",
        "- `couple`: Couple indicator  \n",
        "\n",
        "### üìà Key Findings:\n",
        "- No statistically significant differences (p > 0.05) were found between groups for any variable tested.\n",
        "- For `mrm2`, both a **t-test** and a **linear regression** (`mrm2 ~ treatment`) produced the same result (p = 0.905), confirming the methods agree.\n",
        "\n",
        "### üß† Why It Matters:\n",
        "These tests confirm that the treatment and control groups were **statistically similar before the intervention** ‚Äî supporting the internal validity of the experiment.  \n",
        "This is the purpose of **Table 1** in the paper: to demonstrate that any differences in donation behavior can be attributed to the matching grant treatment, not pre-existing group differences.\n",
        "\n",
        "\n",
        "\n",
        "## Experimental Results\n",
        "\n",
        "### Charitable Contribution Made\n",
        "\n",
        "First, I analyze whether matched donations lead to an increased response rate of making a donation. \n",
        "\n",
        "## üìä Response Rate by Treatment Group\n",
        "\n",
        "We visualize whether being offered a matching donation affects the likelihood of donating. This barplot compares the donation response rate between the treatment and control groups."
      ],
      "id": "764839e8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load the dataset (make sure the file is in the same directory as your notebook)\n",
        "df = pd.read_stata(\"karlan_list_2007.dta\")\n",
        "\n",
        "# Take a quick look at the first few rows\n",
        "df.head()"
      ],
      "id": "5880285b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>treatment</th>\n",
        "      <th>control</th>\n",
        "      <th>ratio</th>\n",
        "      <th>ratio2</th>\n",
        "      <th>ratio3</th>\n",
        "      <th>size</th>\n",
        "      <th>size25</th>\n",
        "      <th>size50</th>\n",
        "      <th>size100</th>\n",
        "      <th>sizeno</th>\n",
        "      <th>...</th>\n",
        "      <th>redcty</th>\n",
        "      <th>bluecty</th>\n",
        "      <th>pwhite</th>\n",
        "      <th>pblack</th>\n",
        "      <th>page18_39</th>\n",
        "      <th>ave_hh_sz</th>\n",
        "      <th>median_hhincome</th>\n",
        "      <th>powner</th>\n",
        "      <th>psch_atlstba</th>\n",
        "      <th>pop_propurban</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>Control</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>Control</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>...</td>\n",
        "      <td>0.0</td>\n",
        "      <td>1.0</td>\n",
        "      <td>0.446493</td>\n",
        "      <td>0.527769</td>\n",
        "      <td>0.317591</td>\n",
        "      <td>2.10</td>\n",
        "      <td>28517.0</td>\n",
        "      <td>0.499807</td>\n",
        "      <td>0.324528</td>\n",
        "      <td>1.0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>Control</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>Control</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>...</td>\n",
        "      <td>1.0</td>\n",
        "      <td>0.0</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>$100,000</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>...</td>\n",
        "      <td>0.0</td>\n",
        "      <td>1.0</td>\n",
        "      <td>0.935706</td>\n",
        "      <td>0.011948</td>\n",
        "      <td>0.276128</td>\n",
        "      <td>2.48</td>\n",
        "      <td>51175.0</td>\n",
        "      <td>0.721941</td>\n",
        "      <td>0.192668</td>\n",
        "      <td>1.0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>Unstated</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>...</td>\n",
        "      <td>1.0</td>\n",
        "      <td>0.0</td>\n",
        "      <td>0.888331</td>\n",
        "      <td>0.010760</td>\n",
        "      <td>0.279412</td>\n",
        "      <td>2.65</td>\n",
        "      <td>79269.0</td>\n",
        "      <td>0.920431</td>\n",
        "      <td>0.412142</td>\n",
        "      <td>1.0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>$50,000</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>...</td>\n",
        "      <td>0.0</td>\n",
        "      <td>1.0</td>\n",
        "      <td>0.759014</td>\n",
        "      <td>0.127421</td>\n",
        "      <td>0.442389</td>\n",
        "      <td>1.85</td>\n",
        "      <td>40908.0</td>\n",
        "      <td>0.416072</td>\n",
        "      <td>0.439965</td>\n",
        "      <td>1.0</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>5 rows √ó 51 columns</p>\n",
        "</div>\n"
      ],
      "id": "10f97e85"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Calculate the mean donation rate for each group\n",
        "donation_rates = df.groupby(\"treatment\")[\"gave\"].mean().reset_index()\n",
        "donation_rates[\"Group\"] = donation_rates[\"treatment\"].map({1: \"Treatment\", 0: \"Control\"})\n",
        "\n",
        "# Create the barplot\n",
        "plt.figure(figsize=(6, 4))\n",
        "sns.barplot(data=donation_rates, x=\"Group\", y=\"gave\", palette=\"Blues_d\")\n",
        "\n",
        "# Label the chart\n",
        "plt.ylabel(\"Proportion Donated\")\n",
        "plt.xlabel(\"Group\")\n",
        "plt.title(\"Donation Response Rate: Treatment vs Control\")\n",
        "plt.ylim(0, 0.03)  # Set y-axis range for visual clarity\n",
        "plt.tight_layout()\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "1ea27556",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "    /tmp/ipykernel_1451/3587301648.py:10: FutureWarning: \n",
        "    \n",
        "    Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
        "    \n",
        "      sns.barplot(data=donation_rates, x=\"Group\", y=\"gave\", palette=\"Blues_d\")\n",
        "\n",
        "\n",
        "\n",
        "    \n",
        "![png](output_1_1.png)\n"
      ],
      "id": "86070188"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import statsmodels.api as sm\n",
        "import statsmodels.formula.api as smf\n",
        "\n",
        "# Load the dataset\n",
        "df = pd.read_stata(\"karlan_list_2007.dta\")\n",
        "\n",
        "# Prepare ratio indicators\n",
        "df[\"ratio\"] = df[\"ratio\"].astype(\"str\")\n",
        "df[\"ratio1\"] = (df[\"ratio\"] == \"1\").astype(int)\n",
        "df[\"ratio2\"] = (df[\"ratio\"] == \"2\").astype(int)\n",
        "df[\"ratio3\"] = (df[\"ratio\"] == \"3\").astype(int)\n",
        "\n",
        "# Filter for treatment group only (exclude control group)\n",
        "df_treat_only = df[df[\"treatment\"] == 1].copy()\n",
        "\n",
        "# T-tests: 1:1 vs 2:1 and 2:1 vs 3:1\n",
        "gave_1to1 = df_treat_only[df_treat_only[\"ratio1\"] == 1][\"gave\"]\n",
        "gave_2to1 = df_treat_only[df_treat_only[\"ratio2\"] == 1][\"gave\"]\n",
        "gave_3to1 = df_treat_only[df_treat_only[\"ratio3\"] == 1][\"gave\"]\n",
        "\n",
        "t_1v2, p_1v2, _ = sm.stats.ttest_ind(gave_1to1, gave_2to1)\n",
        "t_2v3, p_2v3, _ = sm.stats.ttest_ind(gave_2to1, gave_3to1)\n",
        "\n",
        "# Regression using dummy variables\n",
        "reg_dummy = smf.ols(\"gave ~ ratio1 + ratio2 + ratio3 - 1\", data=df_treat_only).fit()\n",
        "\n",
        "# Regression using categorical variable\n",
        "df_treat_only[\"ratio\"] = df_treat_only[\"ratio\"].astype(\"category\")\n",
        "reg_cat = smf.ols(\"gave ~ C(ratio)\", data=df_treat_only).fit()\n",
        "\n",
        "# Group means\n",
        "group_means = df_treat_only.groupby(\"ratio\")[\"gave\"].mean()\n",
        "direct_diff_1v2 = group_means[\"2\"] - group_means[\"1\"]\n",
        "direct_diff_2v3 = group_means[\"3\"] - group_means[\"2\"]\n",
        "\n",
        "# Regression differences\n",
        "coef_1 = reg_dummy.params[\"ratio1\"]\n",
        "coef_2 = reg_dummy.params[\"ratio2\"]\n",
        "coef_3 = reg_dummy.params[\"ratio3\"]\n",
        "reg_diff_1v2 = coef_2 - coef_1\n",
        "reg_diff_2v3 = coef_3 - coef_2\n",
        "\n",
        "# Print summary\n",
        "print(\"T-test p-value (1:1 vs 2:1):\", p_1v2)\n",
        "print(\"T-test p-value (2:1 vs 3:1):\", p_2v3)\n",
        "print(\"Direct difference in response rates (2:1 - 1:1):\", direct_diff_1v2)\n",
        "print(\"Direct difference in response rates (3:1 - 2:1):\", direct_diff_2v3)\n",
        "print(\"Regression-based difference (2:1 - 1:1):\", reg_diff_1v2)\n",
        "print(\"Regression-based difference (3:1 - 2:1):\", reg_diff_2v3)\n",
        "\n",
        "# Optional: Show regression summaries\n",
        "print(\"\\nOLS Regression with dummy variables:\")\n",
        "print(reg_dummy.summary())\n",
        "\n",
        "print(\"\\nOLS Regression with categorical variable:\")\n",
        "print(reg_cat.summary())"
      ],
      "id": "0ccb368c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "    T-test p-value (1:1 vs 2:1): 0.3345316854972399\n",
        "    T-test p-value (2:1 vs 3:1): 0.9600305283739325\n",
        "    Direct difference in response rates (2:1 - 1:1): 0.0018842510217149944\n",
        "    Direct difference in response rates (3:1 - 2:1): 0.00010002398025293902\n",
        "    Regression-based difference (2:1 - 1:1): 0.0018842510217149805\n",
        "    Regression-based difference (3:1 - 2:1): 0.00010002398025296677\n",
        "    \n",
        "    OLS Regression with dummy variables:\n",
        "                                OLS Regression Results                            \n",
        "    ==============================================================================\n",
        "    Dep. Variable:                   gave   R-squared:                       0.000\n",
        "    Model:                            OLS   Adj. R-squared:                 -0.000\n",
        "    Method:                 Least Squares   F-statistic:                    0.6454\n",
        "    Date:                Thu, 24 Apr 2025   Prob (F-statistic):              0.524\n",
        "    Time:                        02:00:40   Log-Likelihood:                 16688.\n",
        "    No. Observations:               33396   AIC:                        -3.337e+04\n",
        "    Df Residuals:                   33393   BIC:                        -3.334e+04\n",
        "    Df Model:                           2                                         \n",
        "    Covariance Type:            nonrobust                                         \n",
        "    ==============================================================================\n",
        "                     coef    std err          t      P>|t|      [0.025      0.975]\n",
        "    ------------------------------------------------------------------------------\n",
        "    ratio1         0.0207      0.001     14.912      0.000       0.018       0.023\n",
        "    ratio2         0.0226      0.001     16.267      0.000       0.020       0.025\n",
        "    ratio3         0.0227      0.001     16.335      0.000       0.020       0.025\n",
        "    ==============================================================================\n",
        "    Omnibus:                    38963.957   Durbin-Watson:                   1.995\n",
        "    Prob(Omnibus):                  0.000   Jarque-Bera (JB):          2506478.937\n",
        "    Skew:                           6.511   Prob(JB):                         0.00\n",
        "    Kurtosis:                      43.394   Cond. No.                         1.00\n",
        "    ==============================================================================\n",
        "    \n",
        "    Notes:\n",
        "    [1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
        "    \n",
        "    OLS Regression with categorical variable:\n",
        "                                OLS Regression Results                            \n",
        "    ==============================================================================\n",
        "    Dep. Variable:                   gave   R-squared:                       0.000\n",
        "    Model:                            OLS   Adj. R-squared:                 -0.000\n",
        "    Method:                 Least Squares   F-statistic:                    0.6454\n",
        "    Date:                Thu, 24 Apr 2025   Prob (F-statistic):              0.524\n",
        "    Time:                        02:00:40   Log-Likelihood:                 16688.\n",
        "    No. Observations:               33396   AIC:                        -3.337e+04\n",
        "    Df Residuals:                   33393   BIC:                        -3.334e+04\n",
        "    Df Model:                           2                                         \n",
        "    Covariance Type:            nonrobust                                         \n",
        "    =================================================================================\n",
        "                        coef    std err          t      P>|t|      [0.025      0.975]\n",
        "    ---------------------------------------------------------------------------------\n",
        "    Intercept         0.0207      0.001     14.912      0.000       0.018       0.023\n",
        "    C(ratio)[T.2]     0.0019      0.002      0.958      0.338      -0.002       0.006\n",
        "    C(ratio)[T.3]     0.0020      0.002      1.008      0.313      -0.002       0.006\n",
        "    ==============================================================================\n",
        "    Omnibus:                    38963.957   Durbin-Watson:                   1.995\n",
        "    Prob(Omnibus):                  0.000   Jarque-Bera (JB):          2506478.937\n",
        "    Skew:                           6.511   Prob(JB):                         0.00\n",
        "    Kurtosis:                      43.394   Cond. No.                         3.73\n",
        "    ==============================================================================\n",
        "    \n",
        "    Notes:\n",
        "    [1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
        "\n",
        "\n",
        "    /tmp/ipykernel_1451/3381687197.py:33: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
        "      group_means = df_treat_only.groupby(\"ratio\")[\"gave\"].mean()\n",
        "\n",
        "\n",
        "## üß™ Does Match Size Affect Donation Rates?\n",
        "\n",
        "We test whether offering larger match ratios (e.g., 2:1 or 3:1) increases the likelihood of donating compared to a standard 1:1 match.\n",
        "\n",
        "### üîç T-Test Results\n",
        "- **1:1 vs 2:1**: No statistically significant difference (p ‚âà 0.335)\n",
        "- **2:1 vs 3:1**: No statistically significant difference (p ‚âà 0.960)\n",
        "\n",
        "### üìà Regression Results\n",
        "We ran two regressions:\n",
        "1. Using separate dummy variables (`ratio1`, `ratio2`, `ratio3`) ‚Äî one for each match level\n",
        "2. Using a single categorical variable (`C(ratio)`)\n",
        "\n",
        "Both approaches yielded similar results:\n",
        "- **Donation rate for 1:1** ‚âà 2.07%\n",
        "- **Donation rate for 2:1** ‚âà 2.26%\n",
        "- **Donation rate for 3:1** ‚âà 2.27%\n",
        "- Differences between them are **very small** and **not statistically significant**\n",
        "\n",
        "### üìä Direct Comparison of Response Rates\n",
        "- **2:1 ‚Äì 1:1** ‚âà +0.19 percentage points\n",
        "- **3:1 ‚Äì 2:1** ‚âà +0.01 percentage points\n",
        "These findings match the regression results.\n",
        "\n",
        "### ‚úÖ Conclusion\n",
        "These results support the authors‚Äô observatin that\n",
        "\"The figures suggest that larger match ratios have no additional impact.\"\n",
        "\n",
        "üí° **Key Insight**: Donors respond to the presence of a match, but **increasing the size of the match does not further increase the likelihood of donating**.\n"
      ],
      "id": "8cef02f8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Filter only those who made a donation\n",
        "df_donors = df[df[\"gave\"] == 1]\n",
        "\n",
        "# Set up the plotting area\n",
        "plt.figure(figsize=(12, 5))\n",
        "\n",
        "# Histogram for Control Group\n",
        "plt.subplot(1, 2, 1)\n",
        "control_amounts = df_donors[df_donors[\"treatment\"] == 0][\"amount\"]\n",
        "sns.histplot(control_amounts, bins=30, kde=False, color=\"skyblue\")\n",
        "plt.axvline(control_amounts.mean(), color='red', linestyle='--', linewidth=2, label=f'Mean: ${control_amounts.mean():.2f}')\n",
        "plt.title(\"Donation Amounts - Control Group\")\n",
        "plt.xlabel(\"Amount Donated\")\n",
        "plt.ylabel(\"Number of Donors\")\n",
        "plt.legend()\n",
        "\n",
        "# Histogram for Treatment Group\n",
        "plt.subplot(1, 2, 2)\n",
        "treatment_amounts = df_donors[df_donors[\"treatment\"] == 1][\"amount\"]\n",
        "sns.histplot(treatment_amounts, bins=30, kde=False, color=\"lightgreen\")\n",
        "plt.axvline(treatment_amounts.mean(), color='red', linestyle='--', linewidth=2, label=f'Mean: ${treatment_amounts.mean():.2f}')\n",
        "plt.title(\"Donation Amounts - Treatment Group\")\n",
        "plt.xlabel(\"Amount Donated\")\n",
        "plt.ylabel(\"Number of Donors\")\n",
        "plt.legend()\n",
        "\n",
        "# Final layout\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "0a71a4ab",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "```python\n",
        "import pandas as pd\n",
        "\n",
        "# Load the dataset (make sure the file is in the same directory as your notebook)\n",
        "df = pd.read_stata(\"karlan_list_2007.dta\")\n",
        "\n",
        "# Take a quick look at the first few rows\n",
        "df.head()\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>treatment</th>\n",
        "      <th>control</th>\n",
        "      <th>ratio</th>\n",
        "      <th>ratio2</th>\n",
        "      <th>ratio3</th>\n",
        "      <th>size</th>\n",
        "      <th>size25</th>\n",
        "      <th>size50</th>\n",
        "      <th>size100</th>\n",
        "      <th>sizeno</th>\n",
        "      <th>...</th>\n",
        "      <th>redcty</th>\n",
        "      <th>bluecty</th>\n",
        "      <th>pwhite</th>\n",
        "      <th>pblack</th>\n",
        "      <th>page18_39</th>\n",
        "      <th>ave_hh_sz</th>\n",
        "      <th>median_hhincome</th>\n",
        "      <th>powner</th>\n",
        "      <th>psch_atlstba</th>\n",
        "      <th>pop_propurban</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>Control</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>Control</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>...</td>\n",
        "      <td>0.0</td>\n",
        "      <td>1.0</td>\n",
        "      <td>0.446493</td>\n",
        "      <td>0.527769</td>\n",
        "      <td>0.317591</td>\n",
        "      <td>2.10</td>\n",
        "      <td>28517.0</td>\n",
        "      <td>0.499807</td>\n",
        "      <td>0.324528</td>\n",
        "      <td>1.0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>Control</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>Control</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>...</td>\n",
        "      <td>1.0</td>\n",
        "      <td>0.0</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>$100,000</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>...</td>\n",
        "      <td>0.0</td>\n",
        "      <td>1.0</td>\n",
        "      <td>0.935706</td>\n",
        "      <td>0.011948</td>\n",
        "      <td>0.276128</td>\n",
        "      <td>2.48</td>\n",
        "      <td>51175.0</td>\n",
        "      <td>0.721941</td>\n",
        "      <td>0.192668</td>\n",
        "      <td>1.0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>Unstated</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>...</td>\n",
        "      <td>1.0</td>\n",
        "      <td>0.0</td>\n",
        "      <td>0.888331</td>\n",
        "      <td>0.010760</td>\n",
        "      <td>0.279412</td>\n",
        "      <td>2.65</td>\n",
        "      <td>79269.0</td>\n",
        "      <td>0.920431</td>\n",
        "      <td>0.412142</td>\n",
        "      <td>1.0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>$50,000</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>...</td>\n",
        "      <td>0.0</td>\n",
        "      <td>1.0</td>\n",
        "      <td>0.759014</td>\n",
        "      <td>0.127421</td>\n",
        "      <td>0.442389</td>\n",
        "      <td>1.85</td>\n",
        "      <td>40908.0</td>\n",
        "      <td>0.416072</td>\n",
        "      <td>0.439965</td>\n",
        "      <td>1.0</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>5 rows √ó 51 columns</p>\n",
        "</div>\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```python\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Calculate the mean donation rate for each group\n",
        "donation_rates = df.groupby(\"treatment\")[\"gave\"].mean().reset_index()\n",
        "donation_rates[\"Group\"] = donation_rates[\"treatment\"].map({1: \"Treatment\", 0: \"Control\"})\n",
        "\n",
        "# Create the barplot\n",
        "plt.figure(figsize=(6, 4))\n",
        "sns.barplot(data=donation_rates, x=\"Group\", y=\"gave\", palette=\"Blues_d\")\n",
        "\n",
        "# Label the chart\n",
        "plt.ylabel(\"Proportion Donated\")\n",
        "plt.xlabel(\"Group\")\n",
        "plt.title(\"Donation Response Rate: Treatment vs Control\")\n",
        "plt.ylim(0, 0.03)  # Set y-axis range for visual clarity\n",
        "plt.tight_layout()\n",
        "\n",
        "# Show the plot\n",
        "plt.show()\n",
        "\n",
        "```\n",
        "\n",
        "    /tmp/ipykernel_1451/3587301648.py:10: FutureWarning: \n",
        "    \n",
        "    Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
        "    \n",
        "      sns.barplot(data=donation_rates, x=\"Group\", y=\"gave\", palette=\"Blues_d\")\n",
        "\n",
        "\n",
        "\n",
        "    \n",
        "![png](/mnt/data/data_analysis_1_1.png)\n",
        "    \n",
        "\n",
        "\n",
        "\n",
        "```python\n",
        "import pandas as pd\n",
        "import statsmodels.api as sm\n",
        "import statsmodels.formula.api as smf\n",
        "\n",
        "# Load the dataset\n",
        "df = pd.read_stata(\"karlan_list_2007.dta\")\n",
        "\n",
        "# Prepare ratio indicators\n",
        "df[\"ratio\"] = df[\"ratio\"].astype(\"str\")\n",
        "df[\"ratio1\"] = (df[\"ratio\"] == \"1\").astype(int)\n",
        "df[\"ratio2\"] = (df[\"ratio\"] == \"2\").astype(int)\n",
        "df[\"ratio3\"] = (df[\"ratio\"] == \"3\").astype(int)\n",
        "\n",
        "# Filter for treatment group only (exclude control group)\n",
        "df_treat_only = df[df[\"treatment\"] == 1].copy()\n",
        "\n",
        "# T-tests: 1:1 vs 2:1 and 2:1 vs 3:1\n",
        "gave_1to1 = df_treat_only[df_treat_only[\"ratio1\"] == 1][\"gave\"]\n",
        "gave_2to1 = df_treat_only[df_treat_only[\"ratio2\"] == 1][\"gave\"]\n",
        "gave_3to1 = df_treat_only[df_treat_only[\"ratio3\"] == 1][\"gave\"]\n",
        "\n",
        "t_1v2, p_1v2, _ = sm.stats.ttest_ind(gave_1to1, gave_2to1)\n",
        "t_2v3, p_2v3, _ = sm.stats.ttest_ind(gave_2to1, gave_3to1)\n",
        "\n",
        "# Regression using dummy variables\n",
        "reg_dummy = smf.ols(\"gave ~ ratio1 + ratio2 + ratio3 - 1\", data=df_treat_only).fit()\n",
        "\n",
        "# Regression using categorical variable\n",
        "df_treat_only[\"ratio\"] = df_treat_only[\"ratio\"].astype(\"category\")\n",
        "reg_cat = smf.ols(\"gave ~ C(ratio)\", data=df_treat_only).fit()\n",
        "\n",
        "# Group means\n",
        "group_means = df_treat_only.groupby(\"ratio\")[\"gave\"].mean()\n",
        "direct_diff_1v2 = group_means[\"2\"] - group_means[\"1\"]\n",
        "direct_diff_2v3 = group_means[\"3\"] - group_means[\"2\"]\n",
        "\n",
        "# Regression differences\n",
        "coef_1 = reg_dummy.params[\"ratio1\"]\n",
        "coef_2 = reg_dummy.params[\"ratio2\"]\n",
        "coef_3 = reg_dummy.params[\"ratio3\"]\n",
        "reg_diff_1v2 = coef_2 - coef_1\n",
        "reg_diff_2v3 = coef_3 - coef_2\n",
        "\n",
        "# Print summary\n",
        "print(\"T-test p-value (1:1 vs 2:1):\", p_1v2)\n",
        "print(\"T-test p-value (2:1 vs 3:1):\", p_2v3)\n",
        "print(\"Direct difference in response rates (2:1 - 1:1):\", direct_diff_1v2)\n",
        "print(\"Direct difference in response rates (3:1 - 2:1):\", direct_diff_2v3)\n",
        "print(\"Regression-based difference (2:1 - 1:1):\", reg_diff_1v2)\n",
        "print(\"Regression-based difference (3:1 - 2:1):\", reg_diff_2v3)\n",
        "\n",
        "# Optional: Show regression summaries\n",
        "print(\"\\nOLS Regression with dummy variables:\")\n",
        "print(reg_dummy.summary())\n",
        "\n",
        "print(\"\\nOLS Regression with categorical variable:\")\n",
        "print(reg_cat.summary())\n",
        "\n",
        "```\n",
        "\n",
        "    T-test p-value (1:1 vs 2:1): 0.3345316854972399\n",
        "    T-test p-value (2:1 vs 3:1): 0.9600305283739325\n",
        "    Direct difference in response rates (2:1 - 1:1): 0.0018842510217149944\n",
        "    Direct difference in response rates (3:1 - 2:1): 0.00010002398025293902\n",
        "    Regression-based difference (2:1 - 1:1): 0.0018842510217149805\n",
        "    Regression-based difference (3:1 - 2:1): 0.00010002398025296677\n",
        "    \n",
        "    OLS Regression with dummy variables:\n",
        "                                OLS Regression Results                            \n",
        "    ==============================================================================\n",
        "    Dep. Variable:                   gave   R-squared:                       0.000\n",
        "    Model:                            OLS   Adj. R-squared:                 -0.000\n",
        "    Method:                 Least Squares   F-statistic:                    0.6454\n",
        "    Date:                Thu, 24 Apr 2025   Prob (F-statistic):              0.524\n",
        "    Time:                        02:00:40   Log-Likelihood:                 16688.\n",
        "    No. Observations:               33396   AIC:                        -3.337e+04\n",
        "    Df Residuals:                   33393   BIC:                        -3.334e+04\n",
        "    Df Model:                           2                                         \n",
        "    Covariance Type:            nonrobust                                         \n",
        "    ==============================================================================\n",
        "                     coef    std err          t      P>|t|      [0.025      0.975]\n",
        "    ------------------------------------------------------------------------------\n",
        "    ratio1         0.0207      0.001     14.912      0.000       0.018       0.023\n",
        "    ratio2         0.0226      0.001     16.267      0.000       0.020       0.025\n",
        "    ratio3         0.0227      0.001     16.335      0.000       0.020       0.025\n",
        "    ==============================================================================\n",
        "    Omnibus:                    38963.957   Durbin-Watson:                   1.995\n",
        "    Prob(Omnibus):                  0.000   Jarque-Bera (JB):          2506478.937\n",
        "    Skew:                           6.511   Prob(JB):                         0.00\n",
        "    Kurtosis:                      43.394   Cond. No.                         1.00\n",
        "    ==============================================================================\n",
        "    \n",
        "    Notes:\n",
        "    [1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
        "    \n",
        "    OLS Regression with categorical variable:\n",
        "                                OLS Regression Results                            \n",
        "    ==============================================================================\n",
        "    Dep. Variable:                   gave   R-squared:                       0.000\n",
        "    Model:                            OLS   Adj. R-squared:                 -0.000\n",
        "    Method:                 Least Squares   F-statistic:                    0.6454\n",
        "    Date:                Thu, 24 Apr 2025   Prob (F-statistic):              0.524\n",
        "    Time:                        02:00:40   Log-Likelihood:                 16688.\n",
        "    No. Observations:               33396   AIC:                        -3.337e+04\n",
        "    Df Residuals:                   33393   BIC:                        -3.334e+04\n",
        "    Df Model:                           2                                         \n",
        "    Covariance Type:            nonrobust                                         \n",
        "    =================================================================================\n",
        "                        coef    std err          t      P>|t|      [0.025      0.975]\n",
        "    ---------------------------------------------------------------------------------\n",
        "    Intercept         0.0207      0.001     14.912      0.000       0.018       0.023\n",
        "    C(ratio)[T.2]     0.0019      0.002      0.958      0.338      -0.002       0.006\n",
        "    C(ratio)[T.3]     0.0020      0.002      1.008      0.313      -0.002       0.006\n",
        "    ==============================================================================\n",
        "    Omnibus:                    38963.957   Durbin-Watson:                   1.995\n",
        "    Prob(Omnibus):                  0.000   Jarque-Bera (JB):          2506478.937\n",
        "    Skew:                           6.511   Prob(JB):                         0.00\n",
        "    Kurtosis:                      43.394   Cond. No.                         3.73\n",
        "    ==============================================================================\n",
        "    \n",
        "    Notes:\n",
        "    [1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
        "\n",
        "\n",
        "    /tmp/ipykernel_1451/3381687197.py:33: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
        "      group_means = df_treat_only.groupby(\"ratio\")[\"gave\"].mean()\n",
        "\n",
        "\n",
        "## üß™ Does Match Size Affect Donation Rates?\n",
        "\n",
        "We test whether offering larger match ratios (e.g., 2:1 or 3:1) increases the likelihood of donating compared to a standard 1:1 match.\n",
        "\n",
        "### üîç T-Test Results\n",
        "- **1:1 vs 2:1**: No statistically significant difference (p ‚âà 0.335)\n",
        "- **2:1 vs 3:1**: No statistically significant difference (p ‚âà 0.960)\n",
        "\n",
        "### üìà Regression Results\n",
        "We ran two regressions:\n",
        "1. Using separate dummy variables (`ratio1`, `ratio2`, `ratio3`) ‚Äî one for each match level\n",
        "2. Using a single categorical variable (`C(ratio)`)\n",
        "\n",
        "Both approaches yielded similar results:\n",
        "- **Donation rate for 1:1** ‚âà 2.07%\n",
        "- **Donation rate for 2:1** ‚âà 2.26%\n",
        "- **Donation rate for 3:1** ‚âà 2.27%\n",
        "- Differences between them are **very small** and **not statistically significant**\n",
        "\n",
        "### üìä Direct Comparison of Response Rates\n",
        "- **2:1 ‚Äì 1:1** ‚âà +0.19 percentage points\n",
        "- **3:1 ‚Äì 2:1** ‚âà +0.01 percentage points\n",
        "These findings match the regression results.\n",
        "\n",
        "### ‚úÖ Conclusion\n",
        "These results support the authors‚Äô observatin that\n",
        "\"The figures suggest that larger match ratios have no additional impact.\"\n",
        "\n",
        "üí° **Key Insight**: Donors respond to the presence of a match, but **increasing the size of the match does not further increase the likelihood of donating**.\n",
        "\n",
        "\n",
        "\n",
        "```python\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Filter only those who made a donation\n",
        "df_donors = df[df[\"gave\"] == 1]\n",
        "\n",
        "# Set up the plotting area\n",
        "plt.figure(figsize=(12, 5))\n",
        "\n",
        "# Histogram for Control Group\n",
        "plt.subplot(1, 2, 1)\n",
        "control_amounts = df_donors[df_donors[\"treatment\"] == 0][\"amount\"]\n",
        "sns.histplot(control_amounts, bins=30, kde=False, color=\"skyblue\")\n",
        "plt.axvline(control_amounts.mean(), color='red', linestyle='--', linewidth=2, label=f'Mean: ${control_amounts.mean():.2f}')\n",
        "plt.title(\"Donation Amounts - Control Group\")\n",
        "plt.xlabel(\"Amount Donated\")\n",
        "plt.ylabel(\"Number of Donors\")\n",
        "plt.legend()\n",
        "\n",
        "# Histogram for Treatment Group\n",
        "plt.subplot(1, 2, 2)\n",
        "treatment_amounts = df_donors[df_donors[\"treatment\"] == 1][\"amount\"]\n",
        "sns.histplot(treatment_amounts, bins=30, kde=False, color=\"lightgreen\")\n",
        "plt.axvline(treatment_amounts.mean(), color='red', linestyle='--', linewidth=2, label=f'Mean: ${treatment_amounts.mean():.2f}')\n",
        "plt.title(\"Donation Amounts - Treatment Group\")\n",
        "plt.xlabel(\"Amount Donated\")\n",
        "plt.ylabel(\"Number of Donors\")\n",
        "plt.legend()\n",
        "\n",
        "# Final layout\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "    \n",
        "![png](/mnt/data/data_analysis_4_0.png)\n",
        "    \n",
        "\n",
        "\n",
        "## üíµ Size of Charitable Contribution\n",
        "\n",
        "### ‚úÖ Q1: Does treatment affect donation amount (all individuals)?\n",
        "We performed both a **t-test** and a **bivariate linear regression** on the full dataset.\n",
        "\n",
        "- **T-test p-value**: ~0.063\n",
        "- **Regression coefficient**: +0.15 (Treatment vs. Control)\n",
        "- üìâ **Interpretation**: \n",
        "  - The treatment group gave slightly more on average, but the difference is **not statistically significant at the 5% level**.\n",
        "  - This suggests that while the match offer encourages more people to donate, it does **not meaningfully affect how much they give**, on average, across the full sample.\n",
        "\n",
        "---\n",
        "\n",
        "### ‚úÖ Q2: Does treatment affect donation amount *among donors only*?\n",
        "We repeated the analysis **only for individuals who made a donation** (i.e., `gave == 1`).\n",
        "\n",
        "- **T-test p-value**: ~0.561\n",
        "- **Regression coefficient**: ‚Äì1.67\n",
        "- üìâ **Interpretation**:\n",
        "  - Among donors, there is **no statistically significant difference** in how much was donated between the treatment and control groups.\n",
        "  - Interestingly, the control group gave slightly more, but this difference is small and not reliable.\n",
        "  - ‚ö†Ô∏è **Causal Note**: This analysis **does not have a causal interpretation**, because it conditions on making a donation ‚Äî a behavior affected by the treatment. This introduces **selection bias**.\n",
        "\n",
        "---\n",
        "\n",
        "### ‚úÖ Q3: What do the histograms show?\n",
        "We created histograms of donation amounts **among donors**, separately for the treatment and control groups. Each plot includes:\n",
        "\n",
        "- A **red dashed line** indicating the mean donation.\n",
        "- The distributions are highly **right-skewed**, with many small gifts and a few large ones.\n",
        "\n",
        "üìä **Observations**:\n",
        "- The average donation amount is **very similar** across the groups.\n",
        "- Most donations are clustered around $10‚Äì$50.\n",
        "- There is **no visual evidence** that treatment led to larger donations.\n",
        "\n",
        "---\n",
        "\n",
        "### üß† Final Takeaway:\n",
        "Offering a **matching grant increases the probability of giving**, but among those who give, **it does not increase the amount given**. This suggests that match offers primarily work as a **participation nudge**, not a **generosity multiplier**.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```python\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Set seed for reproducibility\n",
        "np.random.seed(42)\n",
        "\n",
        "# Simulate 10,000 Bernoulli trials\n",
        "control_draws = np.random.binomial(1, 0.018, size=10000)\n",
        "treatment_draws = np.random.binomial(1, 0.022, size=10000)\n",
        "\n",
        "# Calculate the difference at each draw\n",
        "differences = treatment_draws - control_draws\n",
        "\n",
        "# Compute the cumulative average of the differences\n",
        "cumulative_average = np.cumsum(differences) / np.arange(1, 10001)\n",
        "\n",
        "# Plot the cumulative average\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(cumulative_average, label=\"Cumulative Average of Differences\")\n",
        "plt.axhline(0.004, color=\"red\", linestyle=\"--\", label=\"True Treatment Effect (0.004)\")\n",
        "plt.xlabel(\"Number of Simulations\")\n",
        "plt.ylabel(\"Cumulative Average\")\n",
        "plt.title(\"Law of Large Numbers: Cumulative Average of Treatment - Control\")\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "    \n",
        "![png](/mnt/data/data_analysis_6_0.png)\n",
        "    \n",
        "\n",
        "\n",
        "## üìà Law of Large Numbers: Simulating Donation Response Rates\n",
        "\n",
        "In this simulation, we illustrate the **Law of Large Numbers** using synthetic data inspired by the charitable giving experiment.\n",
        "\n",
        "### üéØ Setup:\n",
        "- **Control Group**: Simulated with a Bernoulli distribution where the probability of donating is 1.8% (p = 0.018)\n",
        "- **Treatment Group**: Simulated with a Bernoulli distribution where the probability of donating is 2.2% (p = 0.022)\n",
        "- We simulate **10,000 draws** from each group and compute the **difference** (Treatment ‚Äì Control) for each pair.\n",
        "- Then, we plot the **cumulative average** of those differences over time.\n",
        "\n",
        "### üìä What the Graph Shows:\n",
        "- The line begins **noisy** due to early randomness.\n",
        "- As the number of draws increases, the average **stabilizes** and converges around the **true treatment effect** of **0.004** (2.2% - 1.8%).\n",
        "- The red dashed line marks this theoretical value.\n",
        "\n",
        "### üß† Interpretation:\n",
        "This visualization demonstrates the **Law of Large Numbers**:\n",
        "> As the sample size grows, the sample average of a statistic will converge to its true population value.\n",
        "\n",
        "This underlines why large-scale experiments (like the one in the Karlan & List paper) are powerful: with enough data, we can estimate effects reliably despite inherent randomness in individual behavior.\n",
        "\n",
        "\n",
        "\n",
        "```python\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Set seed for reproducibility\n",
        "np.random.seed(42)\n",
        "\n",
        "# Function to simulate the distribution of mean differences\n",
        "def simulate_diff_distribution(sample_size, reps=1000):\n",
        "    differences = []\n",
        "    for _ in range(reps):\n",
        "        control_sample = np.random.binomial(1, 0.018, size=sample_size)\n",
        "        treatment_sample = np.random.binomial(1, 0.022, size=sample_size)\n",
        "        diff = treatment_sample.mean() - control_sample.mean()\n",
        "        differences.append(diff)\n",
        "    return differences\n",
        "\n",
        "# Sample sizes\n",
        "sample_sizes = [50, 200, 500, 1000]\n",
        "\n",
        "# Generate and plot each histogram separately\n",
        "for size in sample_sizes:\n",
        "    diffs = simulate_diff_distribution(sample_size=size)\n",
        "    plt.figure(figsize=(7, 4))\n",
        "    sns.histplot(diffs, bins=30, kde=False, color=\"skyblue\")\n",
        "    plt.axvline(0.004, color='red', linestyle='--', linewidth=2, label=\"True Effect = 0.004\")\n",
        "    plt.title(f\"Sampling Distribution of Mean Differences (n = {size})\")\n",
        "    plt.xlabel(\"Mean Difference (Treatment - Control)\")\n",
        "    plt.ylabel(\"Frequency\")\n",
        "    plt.legend()\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "    \n",
        "![png](/mnt/data/data_analysis_8_0.png)\n",
        "    \n",
        "\n",
        "\n",
        "\n",
        "    \n",
        "![png](/mnt/data/data_analysis_8_1.png)\n",
        "    \n",
        "\n",
        "\n",
        "\n",
        "    \n",
        "![png](/mnt/data/data_analysis_8_2.png)\n",
        "    \n",
        "\n",
        "\n",
        "\n",
        "    \n",
        "![png](/mnt/data/data_analysis_8_3.png)\n",
        "    \n",
        "\n",
        "\n",
        "## üìä Central Limit Theorem Demonstration\n",
        "\n",
        "This section visually demonstrates the **Central Limit Theorem (CLT)** using simulations based on the charitable giving experiment setup.\n",
        "\n",
        "### üî¨ Method:\n",
        "For each sample size ‚Äî **n = 50, 200, 500, 1000**:\n",
        "1. We simulate 1,000 experiments.\n",
        "2. In each experiment:\n",
        "   - Take `n` samples from the **control group** (Bernoulli, p = 0.018)\n",
        "   - Take `n` samples from the **treatment group** (Bernoulli, p = 0.022)\n",
        "   - Compute the **average difference** in donation rates: `treatment_mean - control_mean`\n",
        "3. We plot the histogram of the 1,000 average differences.\n",
        "\n",
        "### üìà Interpretation of Histograms:\n",
        "- For **n = 50**, the distribution is **wide and irregular** ‚Äî highly affected by sampling noise.\n",
        "- As `n` increases (200, 500, 1000):\n",
        "  - The distribution becomes **tighter** and **smoother**\n",
        "  - It becomes **centered around the true effect** of **0.004** (shown by a red dashed line).\n",
        "  - The shape begins to resemble a **normal distribution**.\n",
        "\n",
        "### üß† Why It Matters:\n",
        "This simulation illustrates the **Central Limit Theorem**:\n",
        "> As sample size increases, the sampling distribution of the sample mean becomes approximately normal ‚Äî even when the underlying data are not normally distributed.\n",
        "\n",
        "‚úÖ **Takeaway**:  \n",
        "Thanks to the CLT, we can use normal-based inference methods (like t-tests and regression) when we have large enough samples ‚Äî as in the Karlan & List field experiment.\n"
      ],
      "id": "b1d07cdb"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/opt/conda/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}